The question is from https://docs.google.com/document/d/1FmBHDPAzzN40j-sS0Gbb4cpGQAFUREs0pqdhjLHLuIs/edit which are java only questions.

Question 1 - Royal Rumble (Java only)
An ordinal number is a word representing rank or sequential order. The naming convention for royal names is to follow a given name with an ordinal number using a Roman numeral to indicate the birth order of two people of the same name.
The Roman numerals from 1 to 50 are defined as follows: The numbers 1 through 10 are written I, II, III, IV, V, VI, VII, VIII, IX, and X. The Roman numerals corresponding to the numbers 20, 30, 40, and 50 are XX, XXX, XL, and L. For any other two-digit number < 50, its Roman numeral representation is constructed by concatenating the numeral(s) for its multiples of ten with the numeral(s) for its values < 10. For example, 47 is 40 + 7 = "XL" + "VII" = "XLVII".
In this challenge, you will be given a list of royal name strings consisting of a given name followed by an ordinal number. You must sort the list first alphabetically by name, then by ordinal increasing within any given name.
For example, if you are given the royal names [George VI, William II, Elizabeth I, William I] the result of the sort is [Elizabeth I, George VI, William I, William II].

Your task:
Download the project and complete the function getSortedList in RoyalRumble.
https://drive.google.com/open?id=16Klg5pqWAPSWAgZi-QzK1RN2d8abvXwd
getSortedList takes in a list of royal name strings and must return the list of names sorted first by given name, then by ordinal.
You are to submit only the implemented RoyalRumble.java.


Constraints:
There will be between 1 and 50 names on the list.
Each name is a single string composed of firstName and ordinal, separated by a space.
ordinal is a valid Roman numeral representing a number between 1 and 50, inclusive.
The length of firstName will be between 1 and 20.
Each firstName comprises only uppercase and lowercase ascii characters [A-Za-z].
Sample Input:
Louis IX
Louis VIII
David II
Sample Output:
David II
Louis VIII
Louis IX


Question 4 - Defender Arcade (Java only)
TAIGER employees love playing video games, so they have Defender Arcade within the company (Work hard-Play hard). Since everyone is quite busy with work, everyone has provided the time (start time and finish time) when he or she wants to play games. If play time of two employees overlap then they start fighting and stop working. The boss got to know about this situation and asked you to help him by calculating the minimum number of Defender Arcades needed so that every employee can play during their specified time. 
Note: If one employee is leaving and at the same time another employee is starting then only one Arcade is needed.
Your task: Download the project and complete the function countArcades in DefenderArcade.
https://drive.google.com/open?id=1WFR6e2wN4WCNe9ienpB4tt4fu3qp7xlo
countArcades takes in a list of employees' play times and returns the number of arcade machines needed.
You are to submit only the implemented DefenderArcade.java.

Constraints:
There will be between 1 and 100 time periods in the list
Each item in the list is a string composed of start time and end time, separated by a space.
Times are denoted in 24-hour format. For example 915 means 9:15AM, 2145 means 9:45PM, etc.
Output:
Single integer denoting minimum number of Defender Arcade needed.
Sample Input:
900 910
940 1200
950 1120
1100 1130
1300 1400
1350 1420
Sample Output:
3
Explanation:
Between 1100 and 1120, there are 3 employees who wants to play, so a minimum of 3 Defender Arcades are needed.
